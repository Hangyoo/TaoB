import numpy as np
import geatpy as ea

"""
最小化目标双目标优化问题
max f1 = MRR 
min f2 = Ra

s.t.
0 <= x1 <= 10
150 <= x2 <= 300
1000 <= x3 <= 3000
0 <= x4 <= 150
"""


class MyProblem(ea.Problem):  # 继承Problem父类
    def __init__(self, M=2):
        name = 'MyProblem'  # 初始化name（函数名称，可以随意设置）
        Dim = 4  # 初始化Dim（决策变量维数）
        maxormins = [-1, 1] # 初始化maxormins（目标最小最大化标记列表，1：最小化该目标；-1：最大化该目标）
        varTypes = [1] * Dim  # 初始化varTypes（决策变量的类型，0：实数；1：整数）
        lb = [0, 150, 1000, 0]  # 决策变量下界
        ub = [10, 300, 3000, 150]  # 决策变量上界
        lbin = [0, 0, 0, 0]  # 决策变量下边界（0表示不包含该变量的下边界，1表示包含）
        ubin = [1, 1, 1, 1]  # 决策变量上边界（0表示不包含该变量的上边界，1表示包含）
        # 调用父类构造方法完成实例化
        ea.Problem.__init__(self, name, M, maxormins, Dim, varTypes, lb, ub, lbin, ubin)

    def aimFunc(self, pop):  # 目标函数
        Vars = pop.Phen  # 得到决策变量矩阵
        Vars = np.array(Vars, dtype=int)
        x1 = Vars[:, [0]]
        x2 = Vars[:, [1]]
        x3 = Vars[:, [2]]
        x4 = Vars[:, [3]]

        f1 = (4.400739011 - 1.707347833 * x1 - 0.117389030 * x2 + 0.005166991 * x3 + 0.245399263 * x1
               -0.001997742 * x1 * x2 + 0.000094773 * x1 * x3 - 0.000446621 * x1 * x4 - 0.000475104 * x2 * x4 - 0.000064406 * x3 * x4
               +0.132451999 * (x1 ** 2) + 0.000370222 * (x2 ** 2) - 0.000000150 * (x3 ** 2) + 0.000017845 * (x4 ** 2))

        f2 = -0.443348760 + 0.171194564 * x1 + 0.014691340 * x2 + -0.000431259 * x3 - 0.013301111 * x1
        +0.000349027 * x1 * x2 - 0.000010240 * x1 * x3 - 0.000005688 * x1 * x4 + 0.000040222 * x2 * x4 + 0.000002749 * x3 * x4
        -0.013396498 * (x1 ** 2) - 0.000045932 * (x2 ** 2) + 0.000000052 * (x3 ** 2) - 0.000011011 * (x4 ** 2)

        pop.ObjV = np.hstack([f1, f2])  # 把求得的目标函数值赋值给种群pop的ObjV
